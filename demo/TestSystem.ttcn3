module TestSystem
{

// Define a subtype of integer
type integer myNewType (0..50)

// Declare Request struct type with 2 fields
type record Request
{
    myNewType param1,
    charstring param2,
    myNewType param3 optional,
    myNewType param4 optional
}

// Declare Answer struct type with one field
type record Answer
{
    myNewType param1,
    myNewType param2
}

// Declare a message based communication port
type port cEnv_type message
{
    out Request;
    in Answer;
}

// Declare the component on which the test case will run
type component sSystem
{
    port cEnv_type cEnv;
}

// The templates define the outgoing parameter values
// and verify the incoming parameter values
template Request Good_Req := {param1 := 42, param2 := "hello !" };
template Answer All_is_OK := {param1 := 0};

function exampleFunc(Answer p_param1, template Answer p_param2, inout template Answer p_param3)
    runs on sSystem
    return Answer
{
    return p_param;
}

// Define testcase1 that will run on sSystem component
testcase testcase1() runs on sSystem
{
    //builtin types
    var integer l_integer := 1;
    var float l_float := 1.0;
    var boolean l_boolean := true;
    var charstring l_charstring := "Lorem Ipsum"
    var bitstring l_bitstring := '01'B;
    var hexstring l_hexstring := 'FF'H;
    var octetstring l_octetstring := '00'O;
    var anytype l_any := { integer := -1 };

    //user defined types
    var Request l_req := { 1, 1 };
    var template Request l_req2 := { 1, 2 };
    template Request l_req3 := { 1, 2 };

    // Send Request message with (42, "hello !") as parmeters
    cEnv.send(Good_Req);
    // An alternative for the 2 possible answers
    alt
    {
      // Do we receive Answer with 0 as parameter
        []cEnv.receive(All_is_OK)
        {
            // Pass verdict !
            setverdict(pass)
        }
        // Or do we receive something else
        []cEnv.receive
        {
            // Fail verdict
            setverdict(fail)
        }
    }
}

// Control part chains test cases execution automatically
control
{
    var verdicttype verdict1;
    verdict1 := execute(testcase1());
}

}
